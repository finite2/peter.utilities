% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/query_query.R
\name{query}
\alias{query}
\alias{queryQ}
\title{query}
\usage{
query(queries, data, validation, CRF, mess, parameters = NULL,
  patid = "patid", repeatLine1 = NULL, repeatLine2 = NULL,
  reject = TRUE, prnt = TRUE)

queryQ()
}
\arguments{
\item{queries}{An object of reference class dataQueries}

\item{data}{The database to check is valid}

\item{validation}{a quote object to test with the data}

\item{CRF}{The CRF name (string)}

\item{mess}{The message to return if any data fails the validation}

\item{parameters}{a vector of column names to append to the message (string)}

\item{patid}{Name for the main identifier column. Repeat line can take a second. Any others should be added to parameters.}

\item{repeatLine1, repeatLine2}{Name of a line reference column when data is in long format with respect to patid}

\item{reject}{Logical should the validation be TRUE or FALSE to report the query?}

\item{prnt}{Logical should the number of failed queries be returned as a message?}
}
\description{
A function for testing queries on some data. This function uses the gmp package to match data queries which were asked previously.
}
\details{
\code{queryQ()} is a shorthand form which means the parameters do not need to be passed to the function. Instead they must be correctly named in the current namespace. This is currently only tested in the global environment and may not work in other environments such as creating .Rmd files.
}
\section{Functions}{
\itemize{
\item \code{queryQ}: A short hand version which will find the parameters from the global environment
}}
\examples{
# Create a new queryList
q = queryList()

# use the mtcars data for the example
data = mtcars
data$patid = rownames(data)

CRF = "cars"
reject = TRUE

# first validation
validation = quote(disp > 400)
mess = "Disp too high"
parameters = c("disp")

query(q, data, validation, CRF, mess, parameters)
q$q

# running a query again will not add them again:
query(q, data, validation, CRF, mess, parameters)

# a more complex validation
validation = quote(grepl("Merc",patid) & cyl == 4)
mess = "Merc's cannot have 4 cylinders"
parameters = c("cyl")

# test that the validation is written correctly:
with(data, eval(validation))

query(q, data, validation, CRF, mess, parameters)

# short hand form.
queryQ()
q$q
}

